{
	"name": "zx81-debugger",
	"displayName": "ZX81 Debugger",
	"version": "2.0.0",
	"publisher": "andrivet",
	"description": "Visual Studio Code Debugger for the ZX81.",
	"author": {
		"name": "Sebastien Andrivet"
	},
	"license": "GPLv3",
	"keywords": [
		"z80",
		"assembler",
		"debuggers",
		"zx81",
		"mame",
		"cspect"
	],
	"engines": {
		"vscode": ">=1.71.0",
		"node": ">=16.14.0"
	},
	"icon": "assets/icon.png",
	"categories": [
		"Programming Languages",
		"Debuggers"
	],
	"private": false,
	"repository": {
		"type": "git",
		"url": "https://github.com/andrivet/ZX81-Debugger"
	},
	"files": [],
	"scripts": {
		"compile": "tsc -p ./",
		"watch-tsc": "tsc -w -p ./",
		"test": "mocha -u tdd ./out/tests/ --exit",
		"vscode:prepublish": "npm run esbuild-node -- --minify && npm run esbuild-browser -- --minify",
		"esbuild-node": "esbuild ./src/extension.ts --bundle --outdir=out --external:vscode --external:@serialport --external:jsonc-parser --external:node-graphviz --format=cjs --platform=node",
		"esbuild-browser": "esbuild ./src/remotes/zsimulator/zsimwebview/main.ts --bundle --outdir=out --outbase=src --platform=browser",
		"watch-node": "npm run esbuild-node -- --sourcemap --watch",
		"watch-browser": "npm run esbuild-browser -- --sourcemap --watch",
		"package": "vsce package",
		"package:small": "file=$npm_package_name-$npm_package_version.vsix ; vsce package --ignoreFile .vscodeignore_small --out $file ; zip $file.zip $file",
		"check-env": "node -e 'console.log(process.env)' | grep npm"
	},
	"dependencies": {
		"@andrivet/z80-assembler": "^1.3.0",
		"@vscode/debugadapter": "^1.57.0",
		"@vscode/debugprotocol": "^1.57.0",
		"fast-glob": "^3.2.12",
		"gif-writer": "^0.9.4",
		"intel-hex": "^0.1.2",
		"jsonc-parser": "^3.2.0",
		"leader-line": "^1.0.7",
		"minimatch": "^7.2.0",
		"node-graphviz": "^0.1.1",
		"node-gzip": "^1.1.2",
		"posthtml": "^0.16.6",
		"posthtml-toc": "^1.0.3",
		"rng": "^0.2.2",
		"semver": "^7.5.4",
		"serialport": "^10.4.0",
		"showdown": "^2.1.0",
		"xml2js": "^0.6.2"
	},
	"devDependencies": {
		"@types/mocha": "10.0.0",
		"@types/node": "^18.8.2",
		"@types/vscode": "^1.71.0",
		"@types/vscode-webview": "^1.57.0",
		"esbuild": "^0.17.10",
		"mocha": "^10.2.0",
		"sinon": "^18.0.0",
		"source-map-support": "^0.5.21",
		"typescript": "^4.8.4"
	},
	"bugs": {
		"url": "https://github.com/andrivet/ZX81-Debugger/issues"
	},
	"main": "./out/extension.js",
	"activationEvents": [
		"onStartupFinished"
	],
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "ZX81 Debugger Configuration",
			"properties": {
				"zx81debugger.log.global": {
					"description": "Write global logs to an output panel.",
					"type": "boolean",
					"scope": "resource",
					"default": false
				},
				"zx81debugger.log.transport": {
					"description": "Write transport logs (socket, serial, etc.) to an output panel.",
					"type": "boolean",
					"scope": "resource",
					"default": false
				},
				"zx81debugger.log.zsim.customCode": {
					"description": "Write logs regarding custom (js) code to an output panel. For the internal simulator (zsim).",
					"type": "boolean",
					"scope": "resource",
					"default": true
				}
			}
		},
		"languages": [
			{
				"id": "asm-zx81",
				"extensions": [
					".zx81"
				],
				"aliases": [
					"ZX81 Assembler File"
				]
			}
		],
		"grammars": [
			{
				"language": "asm-zx81",
				"scopeName": "source.zx81",
				"path": "./syntaxes/zx81.json"
			}
		],
		"breakpoints": [
			{
				"language": "asm-zx81"
			}
		],
		"commands": [
			{
				"command": "zx81debugger.movePCtoCursor",
				"title": "Move Program Counter to Cursor",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.clearAllDecorations",
				"title": "Clear all decorations",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.serialport.list",
				"title": "Get list of all available serial ports",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.serialport.test",
				"title": "Test communication through a serial port",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.reload",
				"title": "Reload the list file(s).",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.disassemblyAtCursor.code",
				"title": "Code",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.disassemblyAtCursor.data",
				"title": "Data",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.disassemblyAtCursor.string",
				"title": "String",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.analyzeAtCursor.disassembly",
				"title": "Smart Disassembly",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.analyzeAtCursor.flowChart",
				"title": "Flow Chart",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.analyzeAtCursor.callGraph",
				"title": "Call Graph",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.disassembly.refresh",
				"title": "Refresh disassembly",
				"category": "ZX81 Debugger",
				"icon": "$(refresh)"
			},
			{
				"command": "zx81debugger.run",
				"title": "Run with ZX81 Debugger",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.createNewFile",
				"title": "New ZX81 Assembly File",
				"shortTitle": "ZX81 Assembly File",
				"category": "ZX81 Debugger"
			},
			{
				"command": "zx81debugger.pasteExample",
				"title": "Insert an example of ZX81 Assembly File",
				 "shortTitle": "Example ZX81 Assembly File",
				"category": "ZX81 Debugger"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "zx81debugger.movePCtoCursor",
					"when": "false"
				},
				{
					"command": "zx81debugger.disassemblyAtCursor.code",
					"when": "false"
				},
				{
					"command": "zx81debugger.disassemblyAtCursor.data",
					"when": "false"
				},
				{
					"command": "zx81debugger.disassemblyAtCursor.string",
					"when": "false"
				},
				{
					"command": "zx81debugger.analyzeAtCursor.disassembly",
					"when": "false"
				},
				{
					"command": "zx81debugger.analyzeAtCursor.flowChart",
					"when": "false"
				},
				{
					"command": "zx81debugger.analyzeAtCursor.callGraph",
					"when": "false"
				},
				{
					"command": "zx81debugger.disassembly.refresh",
					"when": "false"
				},
				{
					"command": "zx81debugger.clearAllDecorations"
				},
				{
					"command": "zx81debugger.serialport.list"
				},
				{
					"command": "zx81debugger.serialport.test"
				},
				{
					"command": "zx81debugger.reload"
				}
			],
			"explorer/context": [
				{
					"group": "1_zx81debugger",
					"command": "zx81debugger.run",
					"when": "resourceExtname == .p || resourceExtname == .81 || resourceExtname == .p81 || resourceExtname == .P || resourceExtname == .P81"
				}
			],
			"editor/context": [
				{
					"when": "inDebugMode && resourceLangId == asm-zx81",
					"command": "zx81debugger.movePCtoCursor",
					"group": "debug"
				},
				{
					"when": "inDebugMode && resourceLangId == asm-zx81",
					"submenu": "zx81debugger.disassemblyAtCursor",
					"group": "debug"
				},
				{
					"when": "inDebugMode && resourceLangId == asm-zx81",
					"submenu": "zx81debugger.analyzeAtCursor",
					"group": "debug"
				}
			],
			"editor/title": [
				{
					"when": "inDebugMode && resourcePath in zx81debugger.disassembler.disasmPath",
					"command": "zx81debugger.disassembly.refresh",
					"group": "navigation"
				}
			],
			"file/newFile": [
				{
					"command": "zx81debugger.createNewFile",
					"group": "file"
				}
			],
			"zx81debugger.disassemblyAtCursor": [
				{
					"command": "zx81debugger.disassemblyAtCursor.code"
				},
				{
					"command": "zx81debugger.disassemblyAtCursor.data"
				},
				{
					"command": "zx81debugger.disassemblyAtCursor.string"
				}
			],
			"zx81debugger.analyzeAtCursor": [
				{
					"command": "zx81debugger.analyzeAtCursor.disassembly"
				},
				{
					"command": "zx81debugger.analyzeAtCursor.flowChart"
				},
				{
					"command": "zx81debugger.analyzeAtCursor.callGraph"
				}
			]
		},
		"submenus": [
			{
				"id": "zx81debugger.disassemblyAtCursor",
				"label": "Disassembly at Cursor / of Selection"
			},
			{
				"id": "zx81debugger.analyzeAtCursor",
				"label": "Analyze at Cursor"
			}
		],
		"debuggers": [
			{
				"type": "zx81debugger",
				"label": "ZX81 Debugger",
				"program": "./out/src/debugadapter.js",
				"runtime": "node",
				"languages": [
					"asm-zx81"
				],
				"configurationAttributes": {
					"launch": {
						"required": [
							"name",
							"remoteType",
							"rootFolder"
						],
						"properties": {
							"remoteType": {
								"type": "string",
								"enum": [
									"zrcp",
									"cspect",
									"zsim",
									"zxnext",
									"mame"
								],
								"description": "It is possible to use ZX81 Debugger with different remotes. Here you choose the type, i.e. 'zrcp' (ZEsarUX), 'zxnext' or 'zsim' (internal Z80 simulator). Note: Certain features or properties are not available in all types.",
								"default": "zsim"
							},
							"zrcp": {
								"description": "The configuration for the ZEsarUX emulator.",
								"type": "object",
								"properties": {
									"hostname": {
										"type": "string",
										"description": "The hostname/IP address of the ZEsarUX Emulator.",
										"default": "localhost"
									},
									"port": {
										"type": "number",
										"description": "The port of the ZEsarUX Emulator."
									},
									"loadDelay": {
										"type": "number",
										"description": "An additional delay before the assembler program is loaded in ZEsarUX. Use this only if you have problems starting the debug session on Windows. Default: 100ms on Windows, 0ms on other systems."
									},
									"skipInterrupt": {
										"type": "boolean",
										"description": "Skips the interrupt during stepping. Defaults to false."
									},
									"resetOnLaunch": {
										"type": "boolean",
										"description": "Resets the device after starting the debugger before starting the program to debug. Defaults to true."
									},
									"socketTimeout": {
										"type": "number",
										"description": "In secs. If no response is received within this time the connection is disconnected. Usually you don't need to change this value. Defaults to 5 seconds."
									}
								}
							},
							"cspect": {
								"description": "The configuration for the CSpect emulator.",
								"type": "object",
								"properties": {
									"hostname": {
										"type": "string",
										"description": "The hostname/IP address of the CSpect socket.",
										"default": "localhost"
									},
									"port": {
										"type": "number",
										"description": "The port of the CSpect socket."
									},
									"socketTimeout": {
										"type": "number",
										"description": "In secs. If no response is received within this time the connection is disconnected. Usually you don't need to change this value. Defaults to 5 seconds."
									}
								}
							},
							"zsim": {
								"description": "'The configuration of the internal Z80 simulator.",
								"type": "object",
								"properties": {
									"zxKeyboard": {
										"type": "boolean",
										"description": "If true, displayes the ZX81 keyboard.",
										"default": "true"
									},
									"zxInterface2Joy": {
										"type": "boolean",
										"description": "If enabled the simulator shows  a pad to simulate the joysticks for ZX Interface 2.",
										"default": true
									},
									"kempstonJoy": {
										"type": "boolean",
										"description": "If enabled the simulator shows a pad to simulate the Kempston joystick at port 0x1F.",
										"default": true
									},
									"customJoy": {
										"type": "object",
										"description": "Used to define a custom joystick.",
										"properties": {
											"fire": {
												"type": "object",
												"properties": {
													"port": {},
													"bit": {}
												}
											},
											"fire2": {
												"type": "object",
												"properties": {
													"port": {},
													"bit": {}
												}
											},
											"fire3": {
												"type": "object",
												"properties": {
													"port": {},
													"bit": {}
												}
											},
											"fire4": {
												"type": "object",
												"properties": {
													"port": {},
													"bit": {}
												}
											},
											"left": {
												"type": "object",
												"properties": {
													"port": {},
													"bit": {}
												}
											},
											"down": {
												"type": "object",
												"properties": {
													"port": {},
													"bit": {}
												}
											},
											"up": {
												"type": "object",
												"properties": {
													"port": {},
													"bit": {}
												}
											},
											"right": {
												"type": "object",
												"properties": {
													"port": {},
													"bit": {}
												}
											}
										}
									},
									"visualMemory": {
										"type": "boolean",
										"description": "If enabled the simulator shows the access to the memory (0-0xFFFF) visually while the program is running.",
										"default": true
									},
									"memoryModel": {
										"type": "string",
										"enum": [
											"RAM",
											"ZX81-1K",
											"ZX81-2K",
											"ZX81-16K",
											"ZX81-32K",
											"ZX81-48K",
											"ZX81-56K",
											"CUSTOM"
										],
										"description": "Chooses the right memory model. I.e. how the memory maps to ROM and RAM and if and how paging is done.\nA few examples:\n- 'RAM': One memory area of 64K, 1 bank.\n- 'ZX81-16K': ROM and RAM as of a 16k ZX81.\n- 'CUSTOM': A customizable memory model. You define the memory in the 'customMemory' property.",
										"default": "RAM"
									},
									"customMemory": {
										"description": "Only evaluated if 'memoryModel' is set to 'CUSTOM'. Chooses the banks and their memory types. Please refer to the documentation.",
										"type": "object",
										"properties": {
											"slots": {
												"type": "array",
												"description": "An array with the slot definitions.",
												"items": {
													"type": "object",
													"properties": {
														"name": {
															"type": "string",
															"description": "The name of the slot.\nOptional. Required for bank switching slots. This name can be used in 'ioMmu' to assign a different bank to the slot.",
															"default": ""
														},
														"range": {
															"type": "array",
															"description": "Array with first and last (inclusive) address of the slot.\nEither use a decimal number or a hex string.",
															"default": [],
															"items": {
																"type": [
																	"number",
																	"string"
																]
															}
														},
														"banks": {
															"type": "array",
															"description": "Array with the banks that can be associated with the slot.",
															"default": [],
															"items": {
																"type": "object",
																"description": "The bank description. You need to describe a bank only once. If it is also used in another slot just assign the bank via the index.",
																"properties": {
																	"name": {
																		"type": "string",
																		"description": "The name of the bank.\nOptional. Is used in the 'Memory Banks' section in the VARIABLE pane. If not set a name is given automatically.",
																		"default": ""
																	},
																	"shortName": {
																		"type": "string",
																		"description": "The short name of the bank.\nOptional. Is used in the disassembly (disasm.list). If not set a name is given automatically.",
																		"default": ""
																	},
																	"index": {
																		"type": [
																			"number",
																			"array"
																		],
																		"description": "Either the single index/number of the bank. Or the start and end index of a range of banks.",
																		"default": 0,
																		"items": {
																			"type": "number"
																		}
																	},
																	"rom": {
																		"type": "string",
																		"description": "The path to a rom bin file.\nOptional. File content should be in raw format (i.e. `.rom` and `.bin` extensions) or Intel HEX 8-bit format (`.hex` extensions).",
																		"default": ""
																	},
																	"romOffset": {
																		"type": [
																			"number",
																			"string"
																		],
																		"description": "Optional offset of the ROM file/content.\nEither use a decimal number or a hex string.",
																		"default": 0
																	},
																	"defaultFill": {
																		"type": [
																			"number",
																			"string"
																		],
																		"description": "Optional default byte fill value. If omitted: RAM/ROM uses 0.",
																		"default": 0
																	}
																}
															}
														},
														"initialBank": {
															"type": "number",
															"description": "For 'zsim': The number of the bank which is assigned to the slot initially.\nOptional. If not used the first given bank is used instead.",
															"default": 0
														}
													}
												}
											},
											"ioMmu": {
												"description": "The javascript code for bank switching.\nOptional. Only required for memory models that use banking/paging. Please refer to the documentation.\nPlease enter the code as a string or (for readability) as an arra of strings.",
												"type": [
													"string",
													"array"
												],
												"default": [
													""
												],
												"items": {
													"type": "string"
												}
											}
										}
									},
									"ulaScreen": {
										"type": "boolean",
										"description": "If true it shows the contents of the ZX81 (\"zx81\") screen.",
										"default": true
									},
									"ulaOptions": {
										"type": "object",
										"properties": {
											"hires": {
												"type": "boolean",
												"description": "ZX81 only. If true the generation of the screen output by the cpu is simulated. This allows to display hires programs. If false the ZX81 dfile is converted directly into screen graphics. This can be an advantage when debugging a non-hires game. Defaults to true.",
												"default": true
											},
											"lines": {
												"type": "array",
												"description": "Used to define lines that are drawn on the screen area for orientation.",
												"default": [],
												"items": {
													"type": "object",
													"properties": {
														"x1": {
															"type": "string",
															"description": "Start x position of the line."
														},
														"y1": {
															"type": "string",
															"description": "Start y position of the line."
														},
														"x2": {
															"type": "string",
															"description": "End x position of the line."
														},
														"y2": {
															"type": "string",
															"description": "End y position of the line."
														}
													}
												}
											},
											"firstLine": {
												"type": "number",
												"description": "Used only if \"hires\" is true. The first line that should be displayed. Defaults to 56.",
												"default": 56
											},
											"lastLine": {
												"type": "number",
												"description": "Used only if \"hires\" is true. The last line (inclusive) that should be displayed. Defaults to 247.",
												"default": 247
											},
											"showStandardLines": {
												"type": "boolean",
												"description": "In some modes (e.g. zx81/hires) this shows some lines over the display for the borders or the start of the HSYNC pulse.",
												"default": false
											},
											"chroma81": {
												"type": "object",
												"properties": {
													"available": {
														"type": "boolean",
														"description": "ZX81 only. If true the chroma81 is 'attached' and can be accessed through in/out port 0x7FEF.",
														"default": true
													},
													"enabled": {
														"type": "boolean",
														"description": "Initial enable state. I.e. you can enable the chroma81 here right from the start without the need to write to a port.",
														"default": false
													},
													"mode": {
														"type": "number",
														"enum": [
															0,
															1
														],
														"description": "The initial mode (if 'enabled' is true).",
														"default": 0
													},
													"borderColor": {
														"type": "number",
														"description": "The initial border color (if 'enabled' is true). Colors 0-15 like Spectrum colors.",
														"default": 0
													}
												}
											},
											"debug": {
												"type": "boolean",
												"description": "ZX81 only. If true a gray background is shown for the screen areas without output. Only makes a difference for collapsed dfiles, i.e. only for ZX81 with 1-2k memory. Defaults to false.",
												"default": false
											}
										},
										"description": "Several options for the ZX81 ULA screen.",
										"default": {}
									},
									"cpuLoad": {
										"type": "number",
										"description": "The CPU load is calculated by the number of executed HALT tStates vs all tStates. You can disable the display with a 0. 1 will exactly count till the next occurrence of a HALT. Higher numbers will average over more HALT instructions and lead to a more stable display. Practical values are around 10 (the default).",
										"default": 10
									},
									"cpuFrequency": {
										"type": "number",
										"description": "The CPU frequency is only used for output. I.e. when the t-states are printed there is also a printout of the correspondent time. This is calculated via the CPU frequency here.",
										"default": 3500000
									},
									"limitSpeed": {
										"type": "boolean",
										"description": "If enabled the simulated CPU performance is throttled to fit the given CPU frequency. Is enabled by default. If disabled the CPU will be simulated as fast as possible.",
										"default": false
									},
									"updateFrequency": {
										"type": "number",
										"description": "The update frequency of the simulator view in Hz. Defaults to 10 Hz. Possible range is 5 to 100 Hz.",
										"default": 10
									},
									"defaultPortIn": {
										"type": "number",
										"description": "The default value that is read if the read port is unused. Allowed is 255 or 0. 255 also sets the port as 'Open Collector', all triggered ports would be ANDed. Default to 0xFF.",
										"default": 255
									},
									"customCode": {
										"description": "This enables custom code to run inside the simulator, e.g. to simulate additional ports.",
										"properties": {
											"debug": {
												"type": "boolean",
												"description": "If true the zsim simulator view is put in debug mode which makes it easier to develop additional javascript code (see jsPath).",
												"default": false
											},
											"jsPath": {
												"type": "string",
												"description": "A relative path to additional javascript code that is included into the Z80 simulator."
											},
											"uiPath": {
												"type": "string",
												"description": "A relative path to additional javascript code that is included into the Z80 simulator view/UI. This code acts as UI for the code in 'jsPath'"
											},
											"timeStep": {
												"type": "number",
												"description": "You can set a time step (interval) to call the tick() function. If not set then tick() will not be called (although time/t-states still do advance)."
											}
										}
									}
								}
							},
							"mame": {
								"description": "The configuration for debugging with the mame gdbstub.",
								"type": "object",
								"properties": {
									"hostname": {
										"type": "string",
										"description": "The hostname/IP address of the MAME socket.",
										"default": "localhost"
									},
									"port": {
										"type": "number",
										"description": "The port of the CSpect socket."
									},
									"socketTimeout": {
										"type": "number",
										"description": "In secs. If no response is received within this time the connection is disconnected. Usually you don't need to change this value. Defaults to 5 seconds."
									}
								}
							},
							"unitTests": {
								"description": "Whether the configuration contains the unit tests or not. Default: false.",
								"type": "boolean"
							},
							"rootFolder": {
								"description": "The path of the root folder. All other paths are relative to this. Usually set to ${workspaceFolder}.",
								"type": "string"
							},
							"sjasmplus": {
								"description": "All sjasmplus list files. (Typically only one, but it's possible to add more here.)",
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"path"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the assembler '*.sld' file."
										},
										"srcDirs": {
											"type": "array",
											"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here as an array of strings. All dirs are relative to the 'rootFolder'.",
											"default": [
												""
											]
										},
										"excludeFiles": {
											"type": "array",
											"description": "An array of glob patterns with filenames to exclude. The filenames (from the 'include' statement) that do match will not be associated with executed addresses. I.e. those source files are not shown during stepping. You normally only need this if you have multiple source files that share the same addresses. In that case one of the source files is shown. If that is the wrong one you can exclude it here.",
											"default": []
										}
									}
								}
							},
							"z80asm": {
								"description": "All list files. (Typically only one, but it's possible to add more here. E.g. a commented ROM disassembly could be added as complement to the program's list file.)",
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"path"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the assembler .list file."
										},
										"srcDirs": {
											"type": "array",
											"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here either as an array of strings. All dirs are relative to the 'rootFolder'.",
											"default": [
												""
											]
										},
										"excludeFiles": {
											"type": "array",
											"description": "An array of glob patterns with filenames to exclude. The filenames (from the 'include' statement) that do match will not be associated with executed addresses. I.e. those source files are not shown during stepping. You normally only need this if you have multiple source files that share the same addresses. In that case one of the source files is shown. If that is the wrong one you can exclude it here.",
											"default": []
										}
									}
								}
							},
							"z88dk": {
								"description": "All list files. (Typically only one, but it's possible to add more here. E.g. a commented ROM disassembly could be added as complement to the program's list file.)",
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"path",
										"mapFile"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the assembler .list file."
										},
										"srcDirs": {
											"type": "array",
											"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here as an array of strings. All dirs are relative to the 'rootFolder'.",
											"default": [
												""
											]
										},
										"excludeFiles": {
											"type": "array",
											"description": "An array of glob patterns with filenames to exclude. The filenames (from the 'include' statement) that do match will not be associated with executed addresses. I.e. those source files are not shown during stepping. You normally only need this if you have multiple source files that share the same addresses. In that case one of the source files is shown. If that is the wrong one you can exclude it here.",
											"default": []
										},
										"mainFile": {
											"type": "string",
											"description": "Path to the main assembler source file that was used to produce the .list file.",
											"default": null
										},
										"mapFile": {
											"type": "string",
											"description": "The map file is required to correctly parse the label values and to get correct file/line to address associations.",
											"default": 0
										}
									}
								}
							},
							"z88dkv2": {
								"description": "All list files. (Typically only one, but it's possible to add more here. E.g. a commented ROM disassembly could be added as complement to the program's list file.)",
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"path",
										"mapFile"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the assembler .list file."
										},
										"srcDirs": {
											"type": "array",
											"description": "If defined the files referenced in the list file will be used for stepping otherwise the list file itself will be used. The source directories are given here as an array of strings. All dirs are relative to the 'rootFolder'.",
											"default": [
												""
											]
										},
										"excludeFiles": {
											"type": "array",
											"description": "An array of glob patterns with filenames to exclude. The filenames (from the 'include' statement) that do match will not be associated with executed addresses. I.e. those source files are not shown during stepping. You normally only need this if you have multiple source files that share the same addresses. In that case one of the source files is shown. If that is the wrong one you can exclude it here.",
											"default": []
										},
										"mapFile": {
											"type": "string",
											"description": "The map file is required to correctly parse the label values and to get correct file/line to address associations.",
											"default": 0
										}
									}
								}
							},
							"revEng": {
								"description": "List here all manually edited list files.",
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"path"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the .list file. For 'revEng' you may also add a glob pattern here."
										},
										"reloadOnSave": {
											"type": "boolean",
											"description": "If true all list files (and labels) will be automatically re-loaded if this list file has been changed. Otherwise the reload has to be done manually through the command palette.\nDefault is false."
										}
									}
								}
							},
							"smallValuesMaximum": {
								"type": "number",
								"description": "Interprets labels as address if value is bigger. Typically this is e.g. 512. So all numbers below are not treated as addresses if shown. So most constant values are covered with this as they are usually smaller than 512. Influences the formatting.",
								"default": 512
							},
							"disassemblerArgs": {
								"description": "Arguments passed to the disassembler (in the VARIABLES pane).",
								"properties": {
									"numberOfLines": {
										"type": "number",
										"description": "The number of lines displayed in the disassembly.",
										"default": 10
									}
								}
							},
							"smartDisassemblerArgs": {
								"description": "Arguments passed to the smart disassembler used in 'Analyze', i.e. call graph, flow chart and smart (text) disassembler.",
								"properties": {
									"lowerCase": {
										"type": "boolean",
										"description": "true = use lower case for the instructions, false = use upper case.",
										"default": true
									}
								}
							},
							"tmpDir": {
								"type": "string",
								"description": "A directory for temporary files created by this debug adapter. Used e.g. for disassemblies. E.g. '.tmp'"
							},
							"topOfStack": {
								"type": "string",
								"description": "(Optional) You should set this to the label or address which is above the topmost entry on the stack. It is used to determine the end of the call stack."
							},
							"execAddress": {
								"type": "string",
								"description": "The start address of program execution. Use a label or a number."
							},
							"source": {
								"type": "string",
								"description": "(Optional) Compile an assembler file on startup of the debug session."
							},
							"load": {
								"type": "string",
								"description": "(Optional) Load a .P file into the emulator on startup of the debug session."
							},
							"binaries": {
								"description": "List of one or many binaries, i.e. memory dumps. Contain 'path' and 'start' address. (Optional)",
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"path"
									],
									"properties": {
										"path": {
											"type": "string",
											"description": "Path to the binariy file."
										},
										"start": {
											"type": "string",
											"description": "The start address of the binary, e.g. 32768. Can also be a label."
										}
									}
								}
							},
							"startAutomatically": {
								"type": "boolean",
								"description": "Start automatically after launch. Default is false."
							},
							"commandsAfterLaunch": {
								"description": "An array with commands that are executed after the program-to-debug is loaded. With '-e' or '-exec' you can pass commands to the debugger directly.",
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"history": {
								"description": "Configures the 'reverse debugging' (time travel).",
								"type": "object",
								"properties": {
									"reverseDebugInstructionCount": {
										"type": "number",
										"description": "Sets the number of instructions for reverse debugging. If set to 0 then reverse debugging is turned off. Default is 10000."
									},
									"spotCount": {
										"type": "number",
										"description": "Sets the number of instructions to show in a spot. If you set this e.g. to 5 then the 5 previous and the 5 next instructions related to the current position are shown. Use 0 to disable. Default is 10."
									},
									"spotShowRegisters": {
										"type": "boolean",
										"description": "If true it shows the changed register values in the spot history. You can disable the feature here. Defaults to true."
									},
									"codeCoverageEnabled": {
										"type": "boolean",
										"description": "Enables/disables code coverage. Default is true."
									}
								}
							},
							"formatting": {
								"description": "Configures the display of values of ZX81 Debugger. e.g. it is possible to customize how the registers are displayed or what is displayed on hovering.",
								"type": "object",
								"properties": {
									"registerVar": {
										"description": "Defines the formatting of the registers when displayed in the VARIABLES area. E.g. as hex value or as integer. Also allows to display labels and various other formats. Use:\n${name} = the name of the register, e.g. HL\n${hex} = value as hex, e.g. A9F5\n${dhex} = value as hex with space between bytes, e.g. A9 F5\n${unsigned} = value as unsigned, e.g. 1234\n$(signed) = value as signed, e.g. -59\n$(bits) = value as bits , e.g. 10011011\n$(flags) = value interpreted as status flags (only useful for F and F'), e.g. ZNC\n${labels} = value as label (or several labels)\n{labelsplus} = value as label (or several labels) plus an index/offset\n${pre:labels:join} = value as label (or several labels). If no label is found nothing is printed. If at least 1 label is found the 'pre' string is printed followed by the label(s). If more than 1 label is found they are concatenated with the 'join' string.\nNote: The ${b@:...} prefix is not allowed in for the VARIABLES section.",
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"registerHover": {
										"description": "Format how the registers are displayed when hovering with the mouse. Is an array with 2 strings tuples. The first is an regex that checks the register. If fulfilled the 2nd is used to format the value.",
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"bigValues": {
										"type": "string",
										"description": "The general formatting for address labels bigger than 'smallValuesMaximum'."
									},
									"smallValues": {
										"type": "string",
										"description": "The general formatting for small values like constants smaller/equal than 'smallValuesMaximum'."
									},
									"watchByte": {
										"type": "string",
										"description": "The 'byte' formatting for labels in the WATCHes area."
									},
									"watchWord": {
										"type": "string",
										"description": "The 'word' formatting for labels in the WATCHes area."
									},
									"stackVar": {
										"type": "string",
										"description": "Format for the pushed values in the STACK area."
									}
								}
							},
							"memoryViewer": {
								"description": "The appearance of the memory viewer can be customized here. E.g. the colors or the hover display.",
								"type": "object",
								"properties": {
									"addressColor": {
										"type": "string",
										"description": "The text color of the address field."
									},
									"bytesColor": {
										"type": "string",
										"description": "The color of the bytes shown in hex."
									},
									"charColor": {
										"type": "string",
										"description": "The text color of the ZX81 character field."
									},
									"addressHoverFormat": {
										"type": "string",
										"description": "see registerVarFormat. Format for the address when hovering."
									},
									"valueHoverFormat": {
										"type": "string",
										"description": "see registerVarFormat. Format for the value when hovering."
									},
									"registerPointerColors": {
										"type": "array",
										"description": "An array with register/color pairs. All selected register will appear with the correspondent color in the memory view. Registers not chosen will not appear.",
										"items": [
											{
												"type": "string"
											},
											{
												"type": "string"
											}
										],
										"default": [
											"HL",
											"darkgreen",
											"DE",
											"darkcyan",
											"BC",
											"dimgray",
											"IX",
											"darkorange",
											"IY",
											"darkviolet"
										]
									},
									"registersMemoryView": {
										"type": "array",
										"description": "An array of register to show in the register memory view. This view is automatically opened at startup and shows the memory the registers point to. E.g. [ 'HL', 'DE', 'IX' ].",
										"items": {
											"type": "string"
										},
										"default": [
											"HL",
											"DE",
											"BC",
											"IX",
											"IY"
										]
									}
								}
							},
							"unitTestTimeout": {
								"type": "number",
								"description": "(Optional) The timeout for unit tests. If a test lasts longer it is assumed as failed. In secs. Default = 5s."
							}
						}
					}
				},
				"initialConfigurations": [
					{
						"type": "zx81debugger",
						"request": "launch",
						"name": "Simulator - ZX81 16k RAM",
						"remoteType": "zsim",
						"zsim": {
							"visualMemory": true,
							"memoryModel": "ZX81-16K"
						},
						"commandsAfterLaunch": [],
						"history": {
							"reverseDebugInstructionCount": 1000000,
							"spotCount": 10,
							"codeCoverageEnabled": true
						},
						"startAutomatically": false,
						"rootFolder": "^\"\\${workspaceFolder\\}\""
					}
				],
				"configurationSnippets": [
					{
						"label": "ZX81 Debugger: Simulator - ZX81",
						"description": "Configuration for ZX81 Debugger to use the internal simulator for a ZX81 with 56k RAM. Can be used to simulate a ZX81.",
						"body": {
							"type": "zx81debugger",
							"request": "launch",
							"name": "Simulator - ZX81 16k RAM",
							"remoteType": "zsim",
							"zsim": {
								"visualMemory": true,
								"memoryModel": "ZX81-16K"
							},
							"commandsAfterLaunch": [],
							"history": {
								"reverseDebugInstructionCount": 1000000,
								"spotCount": 10,
								"codeCoverageEnabled": true
							},
							"startAutomatically": false,
							"rootFolder": "^\"\\${workspaceFolder\\}\""
						}
					}
				]
			}
		],
		"walkthroughs": [
			{
				"id": "zx81debugger.welcome",
				"title": "Get Started with ZX81 Debugger",
				"description": "Your first steps to create a Z80 assembler file for the ZX81, compile and debug it without leaving Visual Studio Code.",
				"when": "workspacePlatform != webworker",
				"steps": [
					{
						"id": "zx81debugger.createFile",
						"title": "Create a ZX81 assembler file",
						"description": "Create a new, empty, ZX81 assembler file with the [New File...](command:welcome.showNewFileEntries) command in the **File** menu. Select **ZX81 Assembler File** in the list.\n[Create a ZX81 assembler file](command:welcome.showNewFileEntries)",
						"media": {
							"image": "assets/new-file.png",
							"altText": "File / New File... command"
						},
						"completionEvents": [
							"onCommand:zx81debugger.createNewFile"
						]
					},
					{
						"id": "zx81debugger.enterCode",
						"title": "Enter some Z80 assembler code",
						"description": "[Paste](command:zx81debugger.welcome.pasteExample) some example Z80 assembler code in the new file.\n[Paste Example Code](command:zx81debugger.welcome.pasteExample)",
						"media": {
							"image": "assets/example.png",
							"altText": "Some Z80 code"
						},
						"completionEvents": [
							"onCommand:zx81debugger.welcome.pasteExample"
						]
					},
					{
						"id": "zx81debugger.save",
						"title": "Save the ZX81 assembler file",
						"description": "[Save](command:zx81debugger.welcome.save) the ZX81 file. **Be sure to select ZX81 Assembler File** when saving the file to avoid confusion with any other installed extension.\n[Save the ZX81 file](command:zx81debugger.welcome.save)",
						"media": {
							"image": "assets/save.png",
							"altText": "Save the file"
						}
					},
					{
						"id": "zx81debugger.debug",
						"title": "Run and debug your ZX81 program",
						"description": "Click on the [Run and Debug](command:workbench.view.debug) icon in the **Activity Bar** on the left.\n[Show Run and Debug](command:workbench.view.debug)\n\nClick on [Run and Debug](command:zx81debugger.welcome.debug) button or press [F5](command:zx81debugger.welcome.debug) when on the ZX81 file. This will compile the file, start the debugger and display the ZX81 simulator.\n[Start the debugger](command:zx81debugger.welcome.debug)",
						"media": {
							"image": "assets/debug.png",
							"altText": "Run and Debug"
						}
					}
				]
			}
		],
		"snippets": [
			{
				"language": "asm-zx81",
				"path": "./snippets/hello-world.json"
			}
		]
	}
}
